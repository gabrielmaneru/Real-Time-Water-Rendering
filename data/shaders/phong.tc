#version 440
 
struct PhongData
{
    float termIJ;
    float termJK;
    float termIK;
};
 
// tessellation levels
uniform float uTessLevels = 1.0f;
 
layout(vertices=3) out;

in vec3 vNormal[];
in vec3 vTangent[];
in vec3 vBitangent[];
in vec2 vUv[];

out vec3 Normal_tcs[3];
out vec3 Tangent_tcs[3];
out vec3 Bitangent_tcs[3];
out vec2 Uv_tcs[3];
out PhongData PatchData[3];

#define Pi gl_in[0].gl_Position.xyz
#define Pj gl_in[1].gl_Position.xyz
#define Pk gl_in[2].gl_Position.xyz
 
float PI_i(int i, vec3 q)
{
	vec3 qp = q - gl_in[i].gl_Position.xyz;
	return q[gl_InvocationID] - dot(qp, vNormal[i]) * vNormal[i][gl_InvocationID];
}


void main()
{
    // pass data
    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
	
    Normal_tcs[gl_InvocationID] = vNormal[gl_InvocationID];
    Tangent_tcs[gl_InvocationID] = vTangent[gl_InvocationID];
    Bitangent_tcs[gl_InvocationID] = vBitangent[gl_InvocationID];
    Uv_tcs[gl_InvocationID] = vUv[gl_InvocationID];
	
	PatchData[gl_InvocationID].termIJ = PI_i(0,Pj) + PI_i(1,Pi);
	PatchData[gl_InvocationID].termJK = PI_i(1,Pk) + PI_i(2,Pj);
	PatchData[gl_InvocationID].termIK = PI_i(2,Pi) + PI_i(0,Pk);

    // set tess levels
    gl_TessLevelOuter[gl_InvocationID] = uTessLevels;
    gl_TessLevelInner[0] = uTessLevels;
}